-- # 176. Second Highest Salary
select  max(Salary)  SecondHighestSalary   from employee
where salary < (select max(Salary) from employee )

-- # 177. Nth Highest Salary
CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT
BEGIN
  RETURN (
      select salary 
      from ( 
      select distinct salary ,DENSE_Rank() over (order by salary DESC ) rank_s from Employee) tab
      where rank_s=N
  );
END

-- # 178. Rank Scores
select  Score , dense_rank() over (order by Score desc ) as "Rank" from Scores


-- # 180. Consecutive Numbers
select distinct  l1.num as ConsecutiveNums  from logs l1
left join logs l2 on l1.id = l2.id-1
left join logs l3 on l1.id = l3.id+1
where l1.Num   = l2.Num  and  l3.Num    = l1.Num   and l2.Num   = l3.Num  


-- # 184. Department Highest Salary
select d.name Department, e.name Employee, e.salary Salary  from 
Department d
left join 
(select DepartmentId, name,  Salary, dense_rank() over (partition by DepartmentId  order by Salary  desc ) as rank_s   
from employee) e  
on d.id = e.DepartmentId 
where rank_s =1

-- # 534. Game Play Analysis III
select player_id  , event_date ,
sum(games_played ) over (partition by player_id  order by event_date ) as games_played_so_far 
from Activity 

-- # 550. Game Play Analysis IV
-- #  1.Logged in again on the day after the day they first (correct)
select round( count(  tab.loggedforwd)  /(select count(distinct player_id ) from activity) ,2)   fraction   
from 
(
select player_id, 
case when dense_rank() over (partition by player_id  order by event_date ) = 2  then player_id else NULL end as loggedforwd, 
case when event_date - LAG(event_date) over (partition by player_id  order by event_date ) = 1 then 1 else NULL end as diff  
from activity
) tab
where diff is not null
-- # 2.Logged in for at least two consecutive days (what if )
select round( count(  tab.loggedforwd)  /(select count(distinct player_id ) from activity) ,2)   fraction   
from 
(
select player_id, 
case when event_date - LAG(event_date) over (partition by player_id  order by event_date ) = 1 
or   event_date -  LEAD(event_date)  over (partition by player_id  order by event_date ) = -1  then player_id else NULL end as loggedforwd 
from activi
 
-- # 570. Managers with at Least 5 Direct Reports
select name from employee
where ID in (select ManagerId from employee group by ManagerId having count(*)>=5  );

-- # 574. Winning Candidate  
select c.name from candidate c
inner join  (  
    
    select CandidateId, count(*) as ct from Vote group by CandidateId order by ct desc limit 1
            ) tab
on tab.CandidateId =c.id 
  
-- # 578. Get Highest Answer Rate Question  
select question_id   as survey_log   
from survey_log 
group by question_id
order by sum(action  ='answer' ) /sum(action  ='show' ) desc
limit 1
