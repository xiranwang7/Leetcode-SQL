-- # 176. Second Highest Salary
select  max(Salary)  SecondHighestSalary   from employee
where salary < (select max(Salary) from employee )

-- # 177. Nth Highest Salary
CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT
BEGIN
  RETURN (
      select salary 
      from ( 
      select distinct salary ,DENSE_Rank() over (order by salary DESC ) rank_s from Employee) tab
      where rank_s=N
  );
END

-- # 178. Rank Scores
select  Score , dense_rank() over (order by Score desc ) as "Rank" from Scores


-- # 180. Consecutive Numbers
select distinct  l1.num as ConsecutiveNums  from logs l1
left join logs l2 on l1.id = l2.id-1
left join logs l3 on l1.id = l3.id+1
where l1.Num   = l2.Num  and  l3.Num    = l1.Num   and l2.Num   = l3.Num  


-- # 184. Department Highest Salary
select d.name Department, e.name Employee, e.salary Salary  from 
Department d
left join 
(select DepartmentId, name,  Salary, dense_rank() over (partition by DepartmentId  order by Salary  desc ) as rank_s   
from employee) e  
on d.id = e.DepartmentId 
where rank_s =1

-- # 534. Game Play Analysis III
select player_id  , event_date ,
sum(games_played ) over (partition by player_id  order by event_date ) as games_played_so_far 
from Activity 

-- # 550. Game Play Analysis IV
-- #  1.Logged in again on the day after the day they first (correct)
select round( count(  tab.loggedforwd)  /(select count(distinct player_id ) from activity) ,2)   fraction   
from 
(
select player_id, 
case when dense_rank() over (partition by player_id  order by event_date ) = 2  then player_id else NULL end as loggedforwd, 
case when event_date - LAG(event_date) over (partition by player_id  order by event_date ) = 1 then 1 else NULL end as diff  
from activity
) tab
where diff is not null
-- # 2.Logged in for at least two consecutive days (what if )
select round( count(  tab.loggedforwd)  /(select count(distinct player_id ) from activity) ,2)   fraction   
from 
(
select player_id, 
case when event_date - LAG(event_date) over (partition by player_id  order by event_date ) = 1 
or   event_date -  LEAD(event_date)  over (partition by player_id  order by event_date ) = -1  then player_id else NULL end as loggedforwd 
from activi
 
-- # 570. Managers with at Least 5 Direct Reports
select name from employee
where ID in (select ManagerId from employee group by ManagerId having count(*)>=5  );

-- # 574. Winning Candidate  
select c.name from candidate c
inner join  (  
    
    select CandidateId, count(*) as ct from Vote group by CandidateId order by ct desc limit 1
            ) tab
on tab.CandidateId =c.id 
  
-- # 578. Get Highest Answer Rate Question  
select question_id   as survey_log   
from survey_log 
group by question_id
order by sum(action  ='answer' ) /sum(action  ='show' ) desc
limit 1
  
-- # 580. Count Student Number in Departments
 select dept_name ,  ifnull(  student_number ,0) student_number  from department d
left join (select dept_id , 
           count( student_id  )   as student_number  from student  group by dept_id ) st
on st.dept_id = d.dept_id   
group by  dept_name
order by student_number desc , dept_name 
  
-- # 585. Investments in 2016
 --   # (1)
select case when TIV_2016<>TIV_2015 then TIV_2016 else null end as TIV_2016  from 
(
select sum(ins0.TIV_2016 ) TIV_2016 , sum(ins0.TIV_2015 )  TIV_2015 from insurance ins0 
inner join 
(select LAT,  LON , count( * ) as loc_count  from insurance 
group by  LAT,  LON  #having loc_count=1
) ins
on ins.LAT =ins0.LAT and   ins.LON = ins0.LON
inner join 
(select TIV_2015, count( * ) as TIV_2015_count  from insurance 
group by  TIV_2015 #having TIV_2015_count>1
) ins1
on ins1.TIV_2015 =ins0.TIV_2015  
 where loc_count=1 and ins1.TIV_2015_count>1
) tab
--   # (2)
# select sum(TIV_2016) TIV_2016
# from insurance
# where TIV_2015 in (select TIV_2015 from insurance group by TIV_2015 having count(PID) > 1) -- Have the same TIV_2015 value as one or more other policyholders.
# and (LAT,LON) in (select LAT,LON from insurance group by LAT,LON having count(PID) = 1) -- Are not located in the same city as any other policyholder  

--  # 602. Friend Requests II: Who Has the Most Friends
-- # UNION ALL allow dupes union will not allow 
--   # (1)
select id, count(*) as num from 
(select requester_id as id from request_accepted 
UNION ALL 
select accepter_id as id from request_accepted ) tab
group by id
order by num desc
limit 1
--   # (2)
# with tab0 as ( 
# select id, count(*) as num from 
# (select requester_id as id from request_accepted 
# UNION ALL
# select accepter_id as id from request_accepted ) tab
# group by id
# order by num desc
# )
# select id, num from tab0 where num = (select max(num) from tab0 )

  
-- # 608. Tree Node  
--  #(1)   
 select distinct  id as Id,  
case when  p_id is null then 'Root' 
when c_id is null then 'Leaf'
else 'Inner'
end as Type 
from( 
select a.id,a.p_id p_id ,b.id as c_id from tree a
left join tree b on b.p_id =a.id  
    ) tab   
--  #(2) 
    select
    id,
    case when p_id is null then 'Root'
         when p_id is not null and id in (select distinct p_id from tree) then 'Inner'
         else 'Leaf'
    end as Type
from tree
order by id

-- # 612. Shortest Distance in a Plane  
--   # cross join  
  select 
#ROUND(SQRT((POW((p1.x-p2.x), 2) + POW((p1.y-p2.y), 2))),2)  AS 'dist'
 ROUND(SQRT(MIN((POW(p1.x - p2.x, 2) + POW(p1.y - p2.y, 2)))), 2) AS shortest

from point_2d p1 , point_2d p2
where (p1.x,p1.y) != (p2.x, p2.y)

-- # 614. Second Degree Follower
select f1.follower ,count( distinct f2.follower   )    as num from follow f1
inner join follow f2
on f1.follower =f2.followee       
# where f2.follower is not NULL
group by f1.follower 
  
  
--  # 626. Exchange Seats
select 
case when (select count(*)%2 as rmd from seat)=0 then row_even else row_odds  end as id
,student 
from 
(
select 
student ,
case when id = (select max(id) from seat ) then id 
when id%2=0 then id-1
else id+1 end as row_odds , 

case when id%2=0 then id-1
else id+1 end as row_even 
from seat

) tab
order by id
  
 
-- # 1045. Customers Who Bought All Products
select 
customer_id
from 
(
select customer_id,  count(distinct product_key ) as pk_dis   from customer 
group by  customer_id 
) tab
where tab.pk_dis =  (select count(distinct  product_key)    from Product ) 
 # group by customer_id
  
  
-- # 1070. Product Sales Analysis III 
#  (1)
select product_id, year as first_year, quantity, price    from 
(select  a.product_id , a.year ,  a.quantity ,a.price  , dense_rank() over (partition by product_id order by year asc) as rank_num 
from Sales a) tab1
where rank_num=1
#  (2)
# select 
# a.product_id , a1.first_year,  a.quantity ,a.price 
# from
# Sales a
# inner join 
# (
# select product_id , min(year ) as first_year from Sales 
# group by product_id
# ) a1  on a.product_id = a1.product_id and first_year= a.year 
# left join Product p on p.product_id  =  a1.product_id

  
-- # 1077. Project Employees III
select project_id, employee_id
(
select p.project_id, p.employee_id ,e.experience_years ,
dense_rank() over (partition by p.project_id order by experience_years desc  ) as Rank_num
from prject p
left  join Employee e
on e.employee_id = p.employee_id 
) tab
where Rank_num=1
  
  
-- # 1098. Unpopular Books 
select book_id ,name from Books 
where 
book_id not in 
(
select book_id  from Orders
group by book_id 
having sum(case when timestampdiff(year,dispatch_date,'2019-06-23' ) < 1 then quantity  else 0 end ) >=10
 union
(select book_id from Books where timestampdiff(month,available_from,'2019-06-23' ) < 1 
)
)
  
  
-- # 1098. Unpopular Books 
 select  login_date    , count(distinct user_id) as user_count from 
(
    select user_id, min(activity_date) as login_date from traffic 
 where # timestampdiff(day,activity_date,'2019-06-30')<=90 and 
 activity='login'
 group by user_id
 having timestampdiff(day,login_date,'2019-06-30')<=90 
) o
group by  login_date

  
-- #1112. Highest Grade For Each Student
  
-- #(1)  
  select student_id, course_id, grade from
( 
select *,
rank() over (partition by student_id order by grade desc, course_id) ranks
from Enrollments
) tab
where ranks = 1
-- #(2)
 select e0.student_id,min(e.course_id) as course_id ,e0.grade from 
(select    student_id ,max( grade) as grade 
 from enrollments 
group by student_id
order by student_id
 ) e0
left join Enrollments e 
on e.student_id = e0.student_id and e.grade=e0.grade
group by e0.student_id,e0.grade
  
-- 1126. Active Businesses  
  select a.business_id from events a 
left join (
select event_type, avg(occurences) as avg_o from events
group by event_type
) b on a.event_type=b.event_type
where b.avg_o<a.occurences 
group by  a.business_id
having count(  a.business_id )>1
 
--   #1132. Reported Posts II
select round(avg(removed_posts/total_posts*100),2) average_daily_percent from
(
select  
a.action_date,
count(distinct r.post_id) removed_posts , 
count(distinct a.post_id)  total_posts
from Actions a
left join Removals r on a.post_id=r.post_id
where a.extra ='spam' AND a.action = 'report'
group by action_date
 ) tab

--  # 1149. Article Views II
 select distinct  viewer_id  as id from 
( 
select viewer_id, view_date,count(distinct article_id )  as ct from views
group by viewer_id, view_date
having ct>1
    ) tab
  
-- # 1158. Market Analysis I
 select u.user_id as buyer_id ,u.join_date,
ifnull(ct,0) as orders_in_2019 from users u
left join 
(select buyer_id, year(order_date) as yr, count(distinct order_id ) as ct from  Orders
group by buyer_id ,yr
 having yr=2019
) o
on o.buyer_id=u.user_id

  
  
--  # 1164. Product Price at a Given Date 
with tab as ( 
select product_id,  change_date, new_price as price  ,
rank() over(partition by product_id order by  change_date desc ) as rnk
 from products
where change_date<='2019-08-16'  
 )
 
 select product_id, price from tab  where rnk=1
 union

select product_id, coalesce(10,new_price) as 'price'
from Products
where product_id not in (select product_id from tab);
    
  
-- # 1174. Immediate Food Delivery II  
 select 
round(sum(d.order_date  = d.customer_pref_delivery_date )/count(*)*100,2) immediate_percentage 
from Delivery d
inner join 
(
select  customer_id ,  min(order_date ) as order_date from Delivery 
group by customer_id
) tab  on d.customer_id = tab.customer_id and d.order_date =tab.order_date 

  
--  # 1193. Monthly Transactions I
 select  app1.month , app1.country ,app1.trans_count 
, ifnull(approved_count,0) approved_count
,trans_total_amount
,  ifnull( approved_total_amount,0)  approved_total_amount

from
(
select left(trans_date ,7) as month,  country  , count(*) as trans_count,  sum(amount) trans_total_amount 
from Transactions  
group by month ,country
) app1
left join 
(select  left( trans_date ,7) as month, country ,count(*)  approved_count ,sum(amount )  approved_total_amount  
 from Transactions 
where state ='approved'  
 group by month ,country 
) app
on  app1.month = app.month and app1.country =app.country

 
-- # 1204. Last Person to Fit in the Bus
 select person_name  from
(
 select person_id ,turn, person_name ,weight, sum(weight) over( order by turn )  as cum_weight 
 from Queue  order by cum_weight desc
) tab
where cum_weight<=1000
limit 1;

# SELECT   person_name
# FROM     ( SELECT   *, (Sum(weight) OVER(ORDER BY turn) <= 1000) in_limit FROM  queue ) a
# WHERE    in_limit = 1
# ORDER BY turn DESC limit 1
